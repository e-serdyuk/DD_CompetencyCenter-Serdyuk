'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.mountModal = mountModal;
exports.updateModal = updateModal;
exports.unmountModal = unmountModal;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var nextIdValue = 0;
var hasContainer = false;

var modals = [];

var notifyChanged = function notifyChanged() {};

function clearHandler() {
  notifyChanged = function notifyChanged() {};
}

function firstMount() {
  return nextId === 0;
}

function setHandler(handler) {
  hasContainer = true;
  notifyChanged = handler;
  notifyChanged(modals);
}

function nextId() {
  return nextIdValue++;
}

function warnIfNoContainer() {
  if (!hasContainer) {
    console.log('react-router-modal warning: Modal was mounted but no <ModalContainer /> found'); //eslint-disable-line
  }
}

function mountModal(info) {
  if (firstMount() && !hasContainer) {
    setTimeout(warnIfNoContainer, 1000);
  }

  var id = nextId();
  modals.push({
    id: id,
    info: info
  });
  notifyChanged(modals);
  return id;
}

function updateModal(id, info) {
  modals = modals.map(function (m) {
    return m.id === id ? {
      id: id,
      info: info
    } : m;
  });

  notifyChanged(modals);
}

function unmountModal(id) {
  modals = modals.filter(function (m) {
    return m.id !== id;
  });
  notifyChanged(modals);
}

/**
 * Container for rendered modals.
 *
 * This should be included in your react app as one of the last elements before the closing body tag.
 * When modals are rendered, they live inside this container.
 * When no modals are shown, nothing is rendered into the DOM.
 *
 * @param {Props} props
 * @param {String} [props.modalClassName=react-router-modal__modal] class name to apply to modals
 * @param {String} [props.backdropClassName=react-router-modal__backdrop] class name to apply to modal backdrops
 * @param {String} [props.containerClassName=react-router-modal__container] class name to apply to the container itself
 * @param {String} [props.bodyModalClassName=react-router-modal__modal-open] class name to apply to the <body /> when any modals are shown
 *
 * @example <caption>Using default class names</caption>
 *
 * <ModalContainer />
 *
 * @example <caption>Overriding the default class names</caption>
 *
 * <ModalContainer
 *   bodyModalOpenClassName='modal-open'
 *   containerClassName='modal-container'
 *   backdropClassName='modal-backdrop'
 *   modalClassName='modal'
 * />
 *
 *
 * @example <caption>DOM structure</caption>
 * // Note that modals are made "modal" via CSS styles, and end up rendered like the following in the DOM (with two modals, for example):
 * <div className={containerClassName}>
 *   <div>
 *     <div className={backdropClassName} />
 *     <div className={modalClassName}>
 *       .. bottom-most modal contents ..
 *     </div>
 *   </div>
 *   <div>
 *     <div className={backdropClassName} />
 *     <div className={modalClassName}>
 *       .. top-most modal contents ..
 *     </div>
 *   </div>
 * </div>
 *
 */

var ModalContainer = function (_React$Component) {
  _inherits(ModalContainer, _React$Component);

  function ModalContainer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ModalContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModalContainer.__proto__ || Object.getPrototypeOf(ModalContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      modals: []
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModalContainer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      setHandler(this.onModals.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearHandler();
    }
  }, {
    key: 'onModals',
    value: function onModals(modals) {
      this.setState({ modals: modals });
    }
  }, {
    key: 'getSortedModals',
    value: function getSortedModals() {
      var sorted = [].concat(_toConsumableArray(this.state.modals));
      sorted.sort(this.compareModals);
      return sorted;
    }
  }, {
    key: 'compareModals',
    value: function compareModals(a, b) {
      var stackOrderDiff = (a.info.stackOrder || 0) - (b.info.stackOrder || 0);
      if (stackOrderDiff !== 0) return stackOrderDiff;
      return a.id - b.id;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          backdropClassName = _props.backdropClassName,
          containerClassName = _props.containerClassName,
          bodyModalOpenClassName = _props.bodyModalOpenClassName,
          modalClassName = _props.modalClassName;


      var modals = this.getSortedModals();

      if (typeof document !== 'undefined') {
        if (modals.length === 0) {
          document.body && bodyModalOpenClassName && document.body.classList.remove(bodyModalOpenClassName);
        } else {
          document.body && bodyModalOpenClassName && document.body.classList.add(bodyModalOpenClassName);
        }
      }

      if (modals.length === 0) {
        return null;
      }
      return _react2.default.createElement(
        'div',
        { className: containerClassName },
        modals.map(function (m) {
          return _react2.default.createElement(ModalWithBackdrop, {
            key: m.id,
            children: m.info.children,
            backdropClassName: backdropClassName,
            containerClassName: containerClassName,
            modalClassName: m.info.className || modalClassName,
            onBackdropClick: m.info.onBackdropClick,
            component: m.info.component,
            props: m.info.props || {}
          });
        })
      );
    }
  }]);

  return ModalContainer;
}(_react2.default.Component);

ModalContainer.defaultProps = {
  modalClassName: 'react-router-modal__modal',
  backdropClassName: 'react-router-modal__backdrop',
  containerClassName: 'react-router-modal__container',
  bodyModalOpenClassName: 'react-router-modal__modal-open'
};
exports.default = ModalContainer;


function ModalWithBackdrop(_ref2) {
  var children = _ref2.children,
      component = _ref2.component,
      props = _ref2.props,
      onBackdropClick = _ref2.onBackdropClick,
      backdropClassName = _ref2.backdropClassName,
      modalClassName = _ref2.modalClassName;

  var Component = component;

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement('div', { className: backdropClassName || '', onClick: onBackdropClick }),
    _react2.default.createElement(
      'div',
      { className: modalClassName || '' },
      !Component && children,
      Component && _react2.default.createElement(Component, props)
    )
  );
}